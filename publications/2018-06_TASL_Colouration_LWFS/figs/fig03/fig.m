% sound field spectra

%*****************************************************************************
% Copyright (c) 2013-2019 Fiete Winter                                       *
%                         Institut fuer Nachrichtentechnik                   *
%                         Universitaet Rostock                               *
%                         Richard-Wagner-Strasse 31, 18119 Rostock, Germany  *
%                                                                            *
% This file is part of the supplementary material for Fiete Winter's         *
% scientific work and publications                                           *
%                                                                            *
% You can redistribute the material and/or modify it  under the terms of the *
% GNU  General  Public  License as published by the Free Software Foundation *
% , either version 3 of the License,  or (at your option) any later version. *
%                                                                            *
% This Material is distributed in the hope that it will be useful, but       *
% WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY *
% or FITNESS FOR A PARTICULAR PURPOSE.                                       *
% See the GNU General Public License for more details.                       *
%                                                                            *
% You should  have received a copy of the GNU General Public License along   *
% with this program. If not, see <http://www.gnu.org/licenses/>.             *
%                                                                            *
% http://github.com/fietew/publications           fiete.winter@uni-rostock.de*
%*****************************************************************************

clear variables
SFS_start;
SOFAstart;
addpath('../../matlab');
brs_parameters;

%% parameters which should be iterated

% method: reproduction method
% wfs.hpreflow: low cutoff frequency of prefilter for WFS, LWFS-SBL, LWFS-VSS
% wfs.hprefhigh: high cutoff frequency of prefilter for WFS, LWFS-SBL, LWFS-VSS
% usetapwin: tapering for WFS, LWFS-SBL, LWFS-VSS
% localsfs_vss.wfs.hpreflow: low cutoff frequency of prefilter used for virtual
%   secondary source driving function in LWFS-VSS
% localsfs_vss.wfs.hprefhigh: high cutoff frequency of prefilter used for 
%   virtual secondary source driving function in LWFS-VSS
% localsfs_vss.number: number of virtual secondary sources in LWFS-VSS
% localsfs_vss.size: size of virtual secondary source distribution in LWFS-VSS
% localsfs_sbl.Npw: number of plane waves in LWFS-SBL
% localsfs_sbl.order: maximum order of circular expansion in LWFS-SBL
% modal_window: type of modal truncation window
% pos: listener position

param_names = { 
  'method', ...
  'wfs.hpreflow', ...
  'wfs.hprefhigh', ...
  'usetapwin', ...
  'localwfs_vss.wfs.hpreflow',...
  'localwfs_vss.wfs.hprefhigh',...
  'localwfs_vss.number',...
  'localwfs_vss.size',...
  'localwfs_sbl.Npw',...
  'localwfs_sbl.order', ...
  'modal_window', ...
  'pos', ...
  };

%% generate disired combinations of parameter values

param_values = {};

% WFS and NFCHOA
param_values = [param_values; allcombs( ...
  {'wfs', 'nfchoa'}, ...
  {100, NaN}, ...
  {1600, NaN}, ...
  {false, NaN}, ...
  {NaN}, ...
  {NaN}, ...
  {NaN}, ...
  {NaN}, ...
  {NaN}, ...
  {NaN}, ...
  {NaN, 'rect'}, ...
  {[0,0,0], [-0.5 0.75 0]}, ...
  [1,1,1,1,5:10,1,11])];

% LWFS-SBL
param_values = [param_values; allcombs( ...
  {'lwfs-sbl'}, ...
  {100}, ...
  {20000, 20000, 20000, 1500}, ...
  {false}, ...
  {NaN}, ...
  {NaN}, ...
  {NaN}, ...
  {NaN}, ...
  {1024, 1024, 1024, 64}, ...
  {27, 27, 11, 27}, ...
  {'max-rE', 'rect', 'rect', 'rect'}, ...
  {[0,0,0], [-0.5 0.75 0]}, ...
  [1,2,9,4:8,9,9,9,10])];

% LWFS-VSS
param_values = [param_values; allcombs( ...
  {'lwfs-vss'}, ...
  {500, 350}, ...
  {12000, 10000}, ...
  {true}, ...
  {500, 350}, ...
  {12000, 10000}, ...
  {1024}, ...
  {0.6, 0.9}, ...
  {NaN}, ...
  {NaN}, ...
  {NaN}, ...
  {[0,0,0], [-0.5 0.75 0]}, ...
  [1,2,2,4,2,2,7,2,9,10,11,12])];

[num2cell(1:size(param_values)).', param_values]

%% BRS-related stuff
% compute driving signals
exhaustive_evaluation(@brs_driving_signals, param_names, param_values, ...
  conf, false);

%% Evaluation
% compute and plot some frequency spectra
exhaustive_evaluation(@eval_spectrum, param_names, param_values, conf, false);

% store spectra in gnuplot-compatible file
delete(conf.datafile);
exhaustive_evaluation(@eval_gnuplot_spectrum, param_names, param_values, ...
  conf, false);